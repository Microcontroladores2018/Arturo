
PWM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001780  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001908  08001908  00011908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001920  08001920  00011920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001924  08001924  00011924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000000  08001928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  7 .bss          000000c4  20000028  20000028  00020028  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000ec  200000ec  00020028  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000759c  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000122d  00000000  00000000  000275f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009b0  00000000  00000000  00028828  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008f8  00000000  00000000  000291d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000031aa  00000000  00000000  00029ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000308a  00000000  00000000  0002cc7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002fd04  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002acc  00000000  00000000  0002fd80  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0003284c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080018f0 	.word	0x080018f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	080018f0 	.word	0x080018f0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <DAC_SetChannel1Data+0x34>)
 8000a0e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	3308      	adds	r3, #8
 8000a18:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	887b      	ldrh	r3, [r7, #2]
 8000a20:	6013      	str	r3, [r2, #0]
}
 8000a22:	bf00      	nop
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40007400 	.word	0x40007400

08000a34 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <DMA_Init+0xac>)
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000a5e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a6a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	6a1b      	ldr	r3, [r3, #32]
 8000a70:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000a76:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000a82:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a88:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f023 0307 	bic.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	4313      	orrs	r3, r2
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	691a      	ldr	r2, [r3, #16]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685a      	ldr	r2, [r3, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	689a      	ldr	r2, [r3, #8]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	60da      	str	r2, [r3, #12]
}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	f01c803f 	.word	0xf01c803f

08000ae4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000af0:	78fb      	ldrb	r3, [r7, #3]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d006      	beq.n	8000b04 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f043 0201 	orr.w	r2, r3, #1
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000b02:	e005      	b.n	8000b10 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f023 0201 	bic.w	r2, r3, #1
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	601a      	str	r2, [r3, #0]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d002      	beq.n	8000b3a <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000b34:	2301      	movs	r3, #1
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	e001      	b.n	8000b3e <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a15      	ldr	r2, [pc, #84]	; (8000bb8 <DMA_GetFlagStatus+0x6c>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d802      	bhi.n	8000b6c <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <DMA_GetFlagStatus+0x70>)
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	e001      	b.n	8000b70 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <DMA_GetFlagStatus+0x74>)
 8000b6e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	e002      	b.n	8000b88 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000b8e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000b92:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d002      	beq.n	8000ba4 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	75fb      	strb	r3, [r7, #23]
 8000ba2:	e001      	b.n	8000ba8 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	371c      	adds	r7, #28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	4002640f 	.word	0x4002640f
 8000bbc:	40026000 	.word	0x40026000
 8000bc0:	40026400 	.word	0x40026400

08000bc4 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <DMA_ClearFlag+0x50>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d802      	bhi.n	8000bdc <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <DMA_ClearFlag+0x54>)
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	e001      	b.n	8000be0 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <DMA_ClearFlag+0x58>)
 8000bde:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d007      	beq.n	8000bfa <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000bf0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000bf8:	e006      	b.n	8000c08 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000c00:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	6093      	str	r3, [r2, #8]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	4002640f 	.word	0x4002640f
 8000c18:	40026000 	.word	0x40026000
 8000c1c:	40026400 	.word	0x40026400

08000c20 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
 8000c3a:	e076      	b.n	8000d2a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d165      	bne.n	8000d24 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	2103      	movs	r1, #3
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	401a      	ands	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	791b      	ldrb	r3, [r3, #4]
 8000c76:	4619      	mov	r1, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	431a      	orrs	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	791b      	ldrb	r3, [r3, #4]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d003      	beq.n	8000c96 <GPIO_Init+0x76>
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	791b      	ldrb	r3, [r3, #4]
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d12e      	bne.n	8000cf4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	2103      	movs	r1, #3
 8000ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	795b      	ldrb	r3, [r3, #5]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	431a      	orrs	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	4619      	mov	r1, r3
 8000cce:	2301      	movs	r3, #1
 8000cd0:	408b      	lsls	r3, r1
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	401a      	ands	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	683a      	ldr	r2, [r7, #0]
 8000ce0:	7992      	ldrb	r2, [r2, #6]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cec:	b292      	uxth	r2, r2
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	2103      	movs	r1, #3
 8000d00:	fa01 f303 	lsl.w	r3, r1, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	401a      	ands	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68da      	ldr	r2, [r3, #12]
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	79db      	ldrb	r3, [r3, #7]
 8000d14:	4619      	mov	r1, r3
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	3301      	adds	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d985      	bls.n	8000c3c <GPIO_Init+0x1c>
    }
  }
}
 8000d30:	bf00      	nop
 8000d32:	371c      	adds	r7, #28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	691a      	ldr	r2, [r3, #16]
 8000d50:	887b      	ldrh	r3, [r7, #2]
 8000d52:	4013      	ands	r3, r2
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d002      	beq.n	8000d5e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	73fb      	strb	r3, [r7, #15]
 8000d5c:	e001      	b.n	8000d62 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d88:	787a      	ldrb	r2, [r7, #1]
 8000d8a:	887b      	ldrh	r3, [r7, #2]
 8000d8c:	f003 0307 	and.w	r3, r3, #7
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d98:	887b      	ldrh	r3, [r7, #2]
 8000d9a:	08db      	lsrs	r3, r3, #3
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	887b      	ldrh	r3, [r7, #2]
 8000da2:	08db      	lsrs	r3, r3, #3
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	461a      	mov	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3208      	adds	r2, #8
 8000dac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000db0:	887b      	ldrh	r3, [r7, #2]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	210f      	movs	r1, #15
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	ea02 0103 	and.w	r1, r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f100 0208 	add.w	r2, r0, #8
 8000dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000dce:	887b      	ldrh	r3, [r7, #2]
 8000dd0:	08db      	lsrs	r3, r3, #3
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3208      	adds	r2, #8
 8000dda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000de4:	887b      	ldrh	r3, [r7, #2]
 8000de6:	08db      	lsrs	r3, r3, #3
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	461a      	mov	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3208      	adds	r2, #8
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <RCC_TIMCLKPresConfig+0x1c>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6013      	str	r3, [r2, #0]
  
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	424711e0 	.word	0x424711e0

08000e24 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e30:	78fb      	ldrb	r3, [r7, #3]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d006      	beq.n	8000e44 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000e36:	490a      	ldr	r1, [pc, #40]	; (8000e60 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000e42:	e006      	b.n	8000e52 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000e44:	4906      	ldr	r1, [pc, #24]	; (8000e60 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	4013      	ands	r3, r2
 8000e50:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800

08000e64 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e70:	78fb      	ldrb	r3, [r7, #3]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d006      	beq.n	8000e84 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000e76:	490a      	ldr	r1, [pc, #40]	; (8000ea0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000e82:	e006      	b.n	8000e92 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000e84:	4906      	ldr	r1, [pc, #24]	; (8000ea0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	4013      	ands	r3, r2
 8000e90:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800

08000ea4 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	887a      	ldrh	r2, [r7, #2]
 8000eb4:	819a      	strh	r2, [r3, #12]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b085      	sub	sp, #20
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	891b      	ldrh	r3, [r3, #8]
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	887b      	ldrh	r3, [r7, #2]
 8000eda:	4013      	ands	r3, r2
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d002      	beq.n	8000ee8 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e001      	b.n	8000eec <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a29      	ldr	r2, [pc, #164]	; (8000fb8 <TIM_TimeBaseInit+0xbc>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d013      	beq.n	8000f40 <TIM_TimeBaseInit+0x44>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a28      	ldr	r2, [pc, #160]	; (8000fbc <TIM_TimeBaseInit+0xc0>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d00f      	beq.n	8000f40 <TIM_TimeBaseInit+0x44>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f26:	d00b      	beq.n	8000f40 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a25      	ldr	r2, [pc, #148]	; (8000fc0 <TIM_TimeBaseInit+0xc4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d007      	beq.n	8000f40 <TIM_TimeBaseInit+0x44>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a24      	ldr	r2, [pc, #144]	; (8000fc4 <TIM_TimeBaseInit+0xc8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d003      	beq.n	8000f40 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a23      	ldr	r2, [pc, #140]	; (8000fc8 <TIM_TimeBaseInit+0xcc>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d108      	bne.n	8000f52 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000f40:	89fb      	ldrh	r3, [r7, #14]
 8000f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f46:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	885a      	ldrh	r2, [r3, #2]
 8000f4c:	89fb      	ldrh	r3, [r7, #14]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a1d      	ldr	r2, [pc, #116]	; (8000fcc <TIM_TimeBaseInit+0xd0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d00c      	beq.n	8000f74 <TIM_TimeBaseInit+0x78>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <TIM_TimeBaseInit+0xd4>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d008      	beq.n	8000f74 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000f62:	89fb      	ldrh	r3, [r7, #14]
 8000f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f68:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	891a      	ldrh	r2, [r3, #8]
 8000f6e:	89fb      	ldrh	r3, [r7, #14]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	89fa      	ldrh	r2, [r7, #14]
 8000f78:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	881a      	ldrh	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <TIM_TimeBaseInit+0xbc>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d003      	beq.n	8000f9a <TIM_TimeBaseInit+0x9e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a09      	ldr	r2, [pc, #36]	; (8000fbc <TIM_TimeBaseInit+0xc0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d104      	bne.n	8000fa4 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	7a9b      	ldrb	r3, [r3, #10]
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	829a      	strh	r2, [r3, #20]
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40010000 	.word	0x40010000
 8000fbc:	40010400 	.word	0x40010400
 8000fc0:	40000400 	.word	0x40000400
 8000fc4:	40000800 	.word	0x40000800
 8000fc8:	40000c00 	.word	0x40000c00
 8000fcc:	40001000 	.word	0x40001000
 8000fd0:	40001400 	.word	0x40001400

08000fd4 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000fe0:	78fb      	ldrb	r3, [r7, #3]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d008      	beq.n	8000ff8 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 8000ff6:	e007      	b.n	8001008 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001002:	b29a      	uxth	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	801a      	strh	r2, [r3, #0]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d008      	beq.n	8001038 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	b29b      	uxth	r3, r3
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	b29a      	uxth	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001036:	e007      	b.n	8001048 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	b29b      	uxth	r3, r3
 800103e:	f023 0301 	bic.w	r3, r3, #1
 8001042:	b29a      	uxth	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	801a      	strh	r2, [r3, #0]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	817b      	strh	r3, [r7, #10]
 8001062:	2300      	movs	r3, #0
 8001064:	81fb      	strh	r3, [r7, #14]
 8001066:	2300      	movs	r3, #0
 8001068:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	8c1b      	ldrh	r3, [r3, #32]
 800106e:	b29b      	uxth	r3, r3
 8001070:	f023 0301 	bic.w	r3, r3, #1
 8001074:	b29a      	uxth	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	8c1b      	ldrh	r3, [r3, #32]
 800107e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	889b      	ldrh	r3, [r3, #4]
 8001084:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	8b1b      	ldrh	r3, [r3, #24]
 800108a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 800108c:	897b      	ldrh	r3, [r7, #10]
 800108e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001092:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8001094:	897b      	ldrh	r3, [r7, #10]
 8001096:	f023 0303 	bic.w	r3, r3, #3
 800109a:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	881a      	ldrh	r2, [r3, #0]
 80010a0:	897b      	ldrh	r3, [r7, #10]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80010a6:	89fb      	ldrh	r3, [r7, #14]
 80010a8:	f023 0302 	bic.w	r3, r3, #2
 80010ac:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	899a      	ldrh	r2, [r3, #12]
 80010b2:	89fb      	ldrh	r3, [r7, #14]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	885a      	ldrh	r2, [r3, #2]
 80010bc:	89fb      	ldrh	r3, [r7, #14]
 80010be:	4313      	orrs	r3, r2
 80010c0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a1e      	ldr	r2, [pc, #120]	; (8001140 <TIM_OC1Init+0xec>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d003      	beq.n	80010d2 <TIM_OC1Init+0x7e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <TIM_OC1Init+0xf0>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d123      	bne.n	800111a <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80010d2:	89fb      	ldrh	r3, [r7, #14]
 80010d4:	f023 0308 	bic.w	r3, r3, #8
 80010d8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	89da      	ldrh	r2, [r3, #14]
 80010de:	89fb      	ldrh	r3, [r7, #14]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80010e4:	89fb      	ldrh	r3, [r7, #14]
 80010e6:	f023 0304 	bic.w	r3, r3, #4
 80010ea:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	889a      	ldrh	r2, [r3, #4]
 80010f0:	89fb      	ldrh	r3, [r7, #14]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 80010f6:	89bb      	ldrh	r3, [r7, #12]
 80010f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010fc:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80010fe:	89bb      	ldrh	r3, [r7, #12]
 8001100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001104:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	8a1a      	ldrh	r2, [r3, #16]
 800110a:	89bb      	ldrh	r3, [r7, #12]
 800110c:	4313      	orrs	r3, r2
 800110e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	8a5a      	ldrh	r2, [r3, #18]
 8001114:	89bb      	ldrh	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	89ba      	ldrh	r2, [r7, #12]
 800111e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	897a      	ldrh	r2, [r7, #10]
 8001124:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	89fa      	ldrh	r2, [r7, #14]
 8001132:	841a      	strh	r2, [r3, #32]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	40010000 	.word	0x40010000
 8001144:	40010400 	.word	0x40010400

08001148 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	8b1b      	ldrh	r3, [r3, #24]
 800115c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 800115e:	89fb      	ldrh	r3, [r7, #14]
 8001160:	f023 0308 	bic.w	r3, r3, #8
 8001164:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001166:	89fa      	ldrh	r2, [r7, #14]
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	4313      	orrs	r3, r2
 800116c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	89fa      	ldrh	r2, [r7, #14]
 8001172:	831a      	strh	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <STM_EVAL_LEDInit+0x50>)
 800118e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fe45 	bl	8000e24 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <STM_EVAL_LEDInit+0x54>)
 800119e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80011a4:	2301      	movs	r3, #1
 80011a6:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80011a8:	2300      	movs	r3, #0
 80011aa:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80011b0:	2302      	movs	r3, #2
 80011b2:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	4a08      	ldr	r2, [pc, #32]	; (80011d8 <STM_EVAL_LEDInit+0x58>)
 80011b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011bc:	f107 0208 	add.w	r2, r7, #8
 80011c0:	4611      	mov	r1, r2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fd2c 	bl	8000c20 <GPIO_Init>
}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	08001910 	.word	0x08001910
 80011d4:	08001908 	.word	0x08001908
 80011d8:	20000000 	.word	0x20000000

080011dc <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	4a06      	ldr	r2, [pc, #24]	; (8001204 <STM_EVAL_LEDOn+0x28>)
 80011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ee:	79fa      	ldrb	r2, [r7, #7]
 80011f0:	4905      	ldr	r1, [pc, #20]	; (8001208 <STM_EVAL_LEDOn+0x2c>)
 80011f2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80011f6:	831a      	strh	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	20000000 	.word	0x20000000
 8001208:	08001908 	.word	0x08001908

0800120c <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4a06      	ldr	r2, [pc, #24]	; (8001234 <STM_EVAL_LEDOff+0x28>)
 800121a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121e:	79fa      	ldrb	r2, [r7, #7]
 8001220:	4905      	ldr	r1, [pc, #20]	; (8001238 <STM_EVAL_LEDOff+0x2c>)
 8001222:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001226:	835a      	strh	r2, [r3, #26]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	20000000 	.word	0x20000000
 8001238:	08001908 	.word	0x08001908

0800123c <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8001240:	4b38      	ldr	r3, [pc, #224]	; (8001324 <Audio_MAL_IRQHandler+0xe8>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b38      	ldr	r3, [pc, #224]	; (8001328 <Audio_MAL_IRQHandler+0xec>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	4610      	mov	r0, r2
 800124c:	f7ff fc7e 	bl	8000b4c <DMA_GetFlagStatus>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d064      	beq.n	8001320 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8001256:	4b35      	ldr	r3, [pc, #212]	; (800132c <Audio_MAL_IRQHandler+0xf0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d04c      	beq.n	80012f8 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800125e:	bf00      	nop
 8001260:	4b30      	ldr	r3, [pc, #192]	; (8001324 <Audio_MAL_IRQHandler+0xe8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fc59 	bl	8000b1c <DMA_GetCmdStatus>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1f7      	bne.n	8001260 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8001270:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <Audio_MAL_IRQHandler+0xe8>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <Audio_MAL_IRQHandler+0xec>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	4610      	mov	r0, r2
 800127c:	f7ff fca2 	bl	8000bc4 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8001280:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <Audio_MAL_IRQHandler+0xf4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <Audio_MAL_IRQHandler+0xf8>)
 8001288:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 800128a:	4b28      	ldr	r3, [pc, #160]	; (800132c <Audio_MAL_IRQHandler+0xf0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001292:	4293      	cmp	r3, r2
 8001294:	bf28      	it	cs
 8001296:	4613      	movcs	r3, r2
 8001298:	4a26      	ldr	r2, [pc, #152]	; (8001334 <Audio_MAL_IRQHandler+0xf8>)
 800129a:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800129c:	4b21      	ldr	r3, [pc, #132]	; (8001324 <Audio_MAL_IRQHandler+0xe8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4924      	ldr	r1, [pc, #144]	; (8001334 <Audio_MAL_IRQHandler+0xf8>)
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fbc6 	bl	8000a34 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80012a8:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <Audio_MAL_IRQHandler+0xe8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2101      	movs	r1, #1
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fc18 	bl	8000ae4 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80012b4:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <Audio_MAL_IRQHandler+0xf4>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b1c      	ldr	r3, [pc, #112]	; (800132c <Audio_MAL_IRQHandler+0xf0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c0:	d203      	bcs.n	80012ca <Audio_MAL_IRQHandler+0x8e>
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <Audio_MAL_IRQHandler+0xf0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	e000      	b.n	80012cc <Audio_MAL_IRQHandler+0x90>
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <Audio_MAL_IRQHandler+0xfc>)
 80012cc:	4413      	add	r3, r2
 80012ce:	4a18      	ldr	r2, [pc, #96]	; (8001330 <Audio_MAL_IRQHandler+0xf4>)
 80012d0:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <Audio_MAL_IRQHandler+0xf0>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <Audio_MAL_IRQHandler+0xf0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012de:	428b      	cmp	r3, r1
 80012e0:	bf28      	it	cs
 80012e2:	460b      	movcs	r3, r1
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	4a11      	ldr	r2, [pc, #68]	; (800132c <Audio_MAL_IRQHandler+0xf0>)
 80012e8:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <Audio_MAL_IRQHandler+0xe8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2101      	movs	r1, #1
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fbf7 	bl	8000ae4 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80012f6:	e013      	b.n	8001320 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <Audio_MAL_IRQHandler+0xe8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fbf0 	bl	8000ae4 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <Audio_MAL_IRQHandler+0xe8>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <Audio_MAL_IRQHandler+0xec>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	4610      	mov	r0, r2
 8001310:	f7ff fc58 	bl	8000bc4 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <Audio_MAL_IRQHandler+0xf4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f9ac 	bl	8001678 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000018 	.word	0x20000018
 8001328:	2000001c 	.word	0x2000001c
 800132c:	20000010 	.word	0x20000010
 8001330:	20000050 	.word	0x20000050
 8001334:	20000090 	.word	0x20000090
 8001338:	0001fffe 	.word	0x0001fffe

0800133c <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001340:	f7ff ff7c 	bl	800123c <Audio_MAL_IRQHandler>
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}

08001348 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800134c:	f7ff ff76 	bl	800123c <Audio_MAL_IRQHandler>
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}

08001354 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8001358:	2102      	movs	r1, #2
 800135a:	480d      	ldr	r0, [pc, #52]	; (8001390 <SPI3_IRQHandler+0x3c>)
 800135c:	f7ff fdb1 	bl	8000ec2 <SPI_I2S_GetFlagStatus>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d011      	beq.n	800138a <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <SPI3_IRQHandler+0x40>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d106      	bne.n	800137c <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 800136e:	f000 f813 	bl	8001398 <EVAL_AUDIO_GetSampleCallBack>
 8001372:	4603      	mov	r3, r0
 8001374:	4619      	mov	r1, r3
 8001376:	2004      	movs	r0, #4
 8001378:	f7ff fb40 	bl	80009fc <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 800137c:	f000 f80c 	bl	8001398 <EVAL_AUDIO_GetSampleCallBack>
 8001380:	4603      	mov	r3, r0
 8001382:	4619      	mov	r1, r3
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <SPI3_IRQHandler+0x3c>)
 8001386:	f7ff fd8d 	bl	8000ea4 <SPI_I2S_SendData>
  }
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40003c00 	.word	0x40003c00
 8001394:	20000014 	.word	0x20000014

08001398 <EVAL_AUDIO_GetSampleCallBack>:
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0


	return 0x0000;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da0b      	bge.n	80013d4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80013bc:	490d      	ldr	r1, [pc, #52]	; (80013f4 <NVIC_SetPriority+0x4c>)
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	3b04      	subs	r3, #4
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80013d2:	e009      	b.n	80013e8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80013d4:	4908      	ldr	r1, [pc, #32]	; (80013f8 <NVIC_SetPriority+0x50>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00
 80013f8:	e000e100 	.word	0xe000e100

080013fc <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800140a:	d301      	bcc.n	8001410 <SysTick_Config+0x14>
 800140c:	2301      	movs	r3, #1
 800140e:	e011      	b.n	8001434 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8001410:	4a0a      	ldr	r2, [pc, #40]	; (800143c <SysTick_Config+0x40>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001418:	3b01      	subs	r3, #1
 800141a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800141c:	210f      	movs	r1, #15
 800141e:	f04f 30ff 	mov.w	r0, #4294967295
 8001422:	f7ff ffc1 	bl	80013a8 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <SysTick_Config+0x40>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <SysTick_Config+0x40>)
 800142e:	2207      	movs	r2, #7
 8001430:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	e000e010 	.word	0xe000e010

08001440 <Delay>:
	int contador;
	contador = mSecs+1;
	while (contador != 0);
}*/

void Delay (uint16_t i){
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	80fb      	strh	r3, [r7, #6]
	static uint32_t j=0,ij=0;
	for(ij=0;ij<i;ij++)
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <Delay+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e011      	b.n	8001476 <Delay+0x36>
		for(j=0;j<1;j++);
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <Delay+0x50>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e004      	b.n	8001464 <Delay+0x24>
 800145a:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <Delay+0x50>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <Delay+0x50>)
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <Delay+0x50>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f6      	beq.n	800145a <Delay+0x1a>
	for(ij=0;ij<i;ij++)
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <Delay+0x4c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3301      	adds	r3, #1
 8001472:	4a06      	ldr	r2, [pc, #24]	; (800148c <Delay+0x4c>)
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	88fa      	ldrh	r2, [r7, #6]
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <Delay+0x4c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	d8e8      	bhi.n	8001452 <Delay+0x12>
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	20000048 	.word	0x20000048
 8001490:	2000004c 	.word	0x2000004c
 8001494:	00000000 	.word	0x00000000

08001498 <main>:


int main(void)
{
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
       this is done through SystemInit() function which is called from startup
       file (startup_stm32f429_439xx.s) before to branch to application main.
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32f4xx.c file
     */
	  STM_EVAL_LEDInit(LED3);
 800149e:	2001      	movs	r0, #1
 80014a0:	f7ff fe6e 	bl	8001180 <STM_EVAL_LEDInit>
	  STM_EVAL_LEDInit(LED4);
 80014a4:	2000      	movs	r0, #0
 80014a6:	f7ff fe6b 	bl	8001180 <STM_EVAL_LEDInit>
	  STM_EVAL_LEDInit(LED5);
 80014aa:	2002      	movs	r0, #2
 80014ac:	f7ff fe68 	bl	8001180 <STM_EVAL_LEDInit>
	  STM_EVAL_LEDInit(LED6);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f7ff fe65 	bl	8001180 <STM_EVAL_LEDInit>

  /* TIM Configuration */
  TIM_Config();
 80014b6:	f000 f8b9 	bl	800162c <TIM_Config>
     SystemCoreClock variable holds HCLK frequency and is defined in system_stm32f4xx.c file.
     Each time the core clock (HCLK) changes, user had to call SystemCoreClockUpdate()
     function to update SystemCoreClock variable value. Otherwise, any configuration
     based on this variable will be incorrect.    
  ----------------------------------------------------------------------- */   
  RCC_TIMCLKPresConfig(RCC_TIMPrescActivated);
 80014ba:	2001      	movs	r0, #1
 80014bc:	f7ff fca2 	bl	8000e04 <RCC_TIMCLKPresConfig>
  /*Pin Input Configuration*/


  	  	GPIO_InitTypeDef GPIO_Echo;
  	  	GPIO_Echo.GPIO_Mode = GPIO_Mode_IN;
 80014c0:	2300      	movs	r3, #0
 80014c2:	723b      	strb	r3, [r7, #8]
 	    GPIO_Echo.GPIO_OType = GPIO_OType_PP;
 80014c4:	2300      	movs	r3, #0
 80014c6:	72bb      	strb	r3, [r7, #10]
 	    GPIO_Echo.GPIO_Pin = GPIO_Pin_0;
 80014c8:	2301      	movs	r3, #1
 80014ca:	607b      	str	r3, [r7, #4]
 	    GPIO_Echo.GPIO_PuPd = GPIO_PuPd_UP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	72fb      	strb	r3, [r7, #11]
 	    GPIO_Echo.GPIO_Speed = GPIO_Speed_100MHz;
 80014d0:	2303      	movs	r3, #3
 80014d2:	727b      	strb	r3, [r7, #9]
 	    GPIO_Init(GPIOA, &GPIO_Echo);
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	484b      	ldr	r0, [pc, #300]	; (8001608 <main+0x170>)
 80014da:	f7ff fba1 	bl	8000c20 <GPIO_Init>

  /* Compute the prescaler value */
  PrescalerValue = (uint16_t) (SystemCoreClock / 21000000) - 1;
 80014de:	4b4b      	ldr	r3, [pc, #300]	; (800160c <main+0x174>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a4b      	ldr	r2, [pc, #300]	; (8001610 <main+0x178>)
 80014e4:	fba2 2303 	umull	r2, r3, r2, r3
 80014e8:	0ddb      	lsrs	r3, r3, #23
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	3b01      	subs	r3, #1
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	4b48      	ldr	r3, [pc, #288]	; (8001614 <main+0x17c>)
 80014f2:	801a      	strh	r2, [r3, #0]

  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = 335;
 80014f4:	4b48      	ldr	r3, [pc, #288]	; (8001618 <main+0x180>)
 80014f6:	f240 124f 	movw	r2, #335	; 0x14f
 80014fa:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 80014fc:	4b45      	ldr	r3, [pc, #276]	; (8001614 <main+0x17c>)
 80014fe:	881a      	ldrh	r2, [r3, #0]
 8001500:	4b45      	ldr	r3, [pc, #276]	; (8001618 <main+0x180>)
 8001502:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8001504:	4b44      	ldr	r3, [pc, #272]	; (8001618 <main+0x180>)
 8001506:	2200      	movs	r2, #0
 8001508:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800150a:	4b43      	ldr	r3, [pc, #268]	; (8001618 <main+0x180>)
 800150c:	2200      	movs	r2, #0
 800150e:	805a      	strh	r2, [r3, #2]

  TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 8001510:	4941      	ldr	r1, [pc, #260]	; (8001618 <main+0x180>)
 8001512:	4842      	ldr	r0, [pc, #264]	; (800161c <main+0x184>)
 8001514:	f7ff fcf2 	bl	8000efc <TIM_TimeBaseInit>

  /* PWM1 Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8001518:	4b41      	ldr	r3, [pc, #260]	; (8001620 <main+0x188>)
 800151a:	2260      	movs	r2, #96	; 0x60
 800151c:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800151e:	4b40      	ldr	r3, [pc, #256]	; (8001620 <main+0x188>)
 8001520:	2201      	movs	r2, #1
 8001522:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val;
 8001524:	4b3f      	ldr	r3, [pc, #252]	; (8001624 <main+0x18c>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b3d      	ldr	r3, [pc, #244]	; (8001620 <main+0x188>)
 800152c:	609a      	str	r2, [r3, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 800152e:	4b3c      	ldr	r3, [pc, #240]	; (8001620 <main+0x188>)
 8001530:	2200      	movs	r2, #0
 8001532:	819a      	strh	r2, [r3, #12]

  TIM_OC1Init(TIM4, &TIM_OCInitStructure);
 8001534:	493a      	ldr	r1, [pc, #232]	; (8001620 <main+0x188>)
 8001536:	4839      	ldr	r0, [pc, #228]	; (800161c <main+0x184>)
 8001538:	f7ff fd8c 	bl	8001054 <TIM_OC1Init>

  TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 800153c:	2108      	movs	r1, #8
 800153e:	4837      	ldr	r0, [pc, #220]	; (800161c <main+0x184>)
 8001540:	f7ff fe02 	bl	8001148 <TIM_OC1PreloadConfig>
  TIM_OC4Init(TIM4, &TIM_OCInitStructure);

  TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable); */


  TIM_ARRPreloadConfig(TIM4, ENABLE);
 8001544:	2101      	movs	r1, #1
 8001546:	4835      	ldr	r0, [pc, #212]	; (800161c <main+0x184>)
 8001548:	f7ff fd44 	bl	8000fd4 <TIM_ARRPreloadConfig>
  /* TIM4 enable counter */
  TIM_Cmd(TIM4, ENABLE);
 800154c:	2101      	movs	r1, #1
 800154e:	4833      	ldr	r0, [pc, #204]	; (800161c <main+0x184>)
 8001550:	f7ff fd60 	bl	8001014 <TIM_Cmd>

  SysTick_Config(168-1);
 8001554:	20a7      	movs	r0, #167	; 0xa7
 8001556:	f7ff ff51 	bl	80013fc <SysTick_Config>



  while (1)
  {
	  time = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
	  uint8_t laststate = Bit_SET;
 800155e:	2301      	movs	r3, #1
 8001560:	74fb      	strb	r3, [r7, #19]
	  while(laststate == Bit_SET) {
 8001562:	e00b      	b.n	800157c <main+0xe4>
	  		laststate = GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0);
 8001564:	2101      	movs	r1, #1
 8001566:	4828      	ldr	r0, [pc, #160]	; (8001608 <main+0x170>)
 8001568:	f7ff fbe8 	bl	8000d3c <GPIO_ReadInputDataBit>
 800156c:	4603      	mov	r3, r0
 800156e:	74fb      	strb	r3, [r7, #19]
	  		Delay(1);
 8001570:	2001      	movs	r0, #1
 8001572:	f7ff ff65 	bl	8001440 <Delay>
	                  time++;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3301      	adds	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
	  while(laststate == Bit_SET) {
 800157c:	7cfb      	ldrb	r3, [r7, #19]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d0f0      	beq.n	8001564 <main+0xcc>
	  	}

	  dist=time*0.034/2;
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7fe ff72 	bl	800046c <__aeabi_i2d>
 8001588:	a31d      	add	r3, pc, #116	; (adr r3, 8001600 <main+0x168>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	f7fe ffd3 	bl	8000538 <__aeabi_dmul>
 8001592:	4603      	mov	r3, r0
 8001594:	460c      	mov	r4, r1
 8001596:	4618      	mov	r0, r3
 8001598:	4621      	mov	r1, r4
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a2:	f7ff f8f3 	bl	800078c <__aeabi_ddiv>
 80015a6:	4603      	mov	r3, r0
 80015a8:	460c      	mov	r4, r1
 80015aa:	4618      	mov	r0, r3
 80015ac:	4621      	mov	r1, r4
 80015ae:	f7ff f9d5 	bl	800095c <__aeabi_d2f>
 80015b2:	4603      	mov	r3, r0
 80015b4:	60fb      	str	r3, [r7, #12]
	  if (dist < 0) {
 80015b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c2:	d506      	bpl.n	80015d2 <main+0x13a>
		  	  	  STM_EVAL_LEDOn(LED3);
 80015c4:	2001      	movs	r0, #1
 80015c6:	f7ff fe09 	bl	80011dc <STM_EVAL_LEDOn>
		  	  	  STM_EVAL_LEDOff(LED4);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f7ff fe1e 	bl	800120c <STM_EVAL_LEDOff>
 80015d0:	e7c3      	b.n	800155a <main+0xc2>
	          } else if (dist > 50) {
 80015d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80015d6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001628 <main+0x190>
 80015da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e2:	dd06      	ble.n	80015f2 <main+0x15a>
	              /* Distance more than 50cm */
	        	  STM_EVAL_LEDOn(LED4);
 80015e4:	2000      	movs	r0, #0
 80015e6:	f7ff fdf9 	bl	80011dc <STM_EVAL_LEDOn>
	        	  STM_EVAL_LEDOff(LED3);
 80015ea:	2001      	movs	r0, #1
 80015ec:	f7ff fe0e 	bl	800120c <STM_EVAL_LEDOff>
 80015f0:	e7b3      	b.n	800155a <main+0xc2>

	          } else {
	              /* Distance between 0 and 50cm */
	        	  STM_EVAL_LEDOn(LED5);
 80015f2:	2002      	movs	r0, #2
 80015f4:	f7ff fdf2 	bl	80011dc <STM_EVAL_LEDOn>
  {
 80015f8:	e7af      	b.n	800155a <main+0xc2>
 80015fa:	bf00      	nop
 80015fc:	f3af 8000 	nop.w
 8001600:	b020c49c 	.word	0xb020c49c
 8001604:	3fa16872 	.word	0x3fa16872
 8001608:	40020000 	.word	0x40020000
 800160c:	20000024 	.word	0x20000024
 8001610:	6642d929 	.word	0x6642d929
 8001614:	20000044 	.word	0x20000044
 8001618:	200000cc 	.word	0x200000cc
 800161c:	40000800 	.word	0x40000800
 8001620:	200000d8 	.word	0x200000d8
 8001624:	20000020 	.word	0x20000020
 8001628:	42480000 	.word	0x42480000

0800162c <TIM_Config>:
  * @brief  Configure the TIM4 Ouput Channels.
  * @param  None
  * @retval None
  */
void TIM_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* TIM4 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001632:	2101      	movs	r1, #1
 8001634:	2004      	movs	r0, #4
 8001636:	f7ff fc15 	bl	8000e64 <RCC_APB1PeriphClockCmd>

  /* GPIOD clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800163a:	2101      	movs	r1, #1
 800163c:	2008      	movs	r0, #8
 800163e:	f7ff fbf1 	bl	8000e24 <RCC_AHB1PeriphClockCmd>
  
  /* GPIOD Configuration: TIM4 CH1 (PD12), TIM4 CH2 (PD13), TIM4 CH3 (PD14) and TIM4 CH4 (PD15) */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 |  GPIO_Pin_14 | GPIO_Pin_15;
 8001642:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001646:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001648:	2302      	movs	r3, #2
 800164a:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800164c:	2303      	movs	r3, #3
 800164e:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001650:	2300      	movs	r3, #0
 8001652:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8001654:	2301      	movs	r3, #1
 8001656:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001658:	463b      	mov	r3, r7
 800165a:	4619      	mov	r1, r3
 800165c:	4805      	ldr	r0, [pc, #20]	; (8001674 <TIM_Config+0x48>)
 800165e:	f7ff fadf 	bl	8000c20 <GPIO_Init>

  /* Connect TIM4 pins to AF2 */  
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
 8001662:	2202      	movs	r2, #2
 8001664:	210c      	movs	r1, #12
 8001666:	4803      	ldr	r0, [pc, #12]	; (8001674 <TIM_Config+0x48>)
 8001668:	f7ff fb82 	bl	8000d70 <GPIO_PinAFConfig>
  //GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);
 // GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);
  //GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_TIM4);
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40020c00 	.word	0x40020c00

08001678 <EVAL_AUDIO_TransferComplete_CallBack>:
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
	int i=0;
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
}
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001694:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001698:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800169a:	e003      	b.n	80016a4 <LoopCopyDataInit>

0800169c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800169e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016a2:	3104      	adds	r1, #4

080016a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016a4:	480b      	ldr	r0, [pc, #44]	; (80016d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016ac:	d3f6      	bcc.n	800169c <CopyDataInit>
  ldr  r2, =_sbss
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016b0:	e002      	b.n	80016b8 <LoopFillZerobss>

080016b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016b4:	f842 3b04 	str.w	r3, [r2], #4

080016b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016bc:	d3f9      	bcc.n	80016b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016be:	f000 f841 	bl	8001744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016c2:	f000 f8f1 	bl	80018a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c6:	f7ff fee7 	bl	8001498 <main>
  bx  lr    
 80016ca:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80016d0:	08001928 	.word	0x08001928
  ldr  r0, =_sdata
 80016d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016d8:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 80016dc:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 80016e0:	200000ec 	.word	0x200000ec

080016e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <ADC_IRQHandler>

080016e6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <HardFault_Handler+0x4>

080016fa <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <MemManage_Handler+0x4>

08001700 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001704:	e7fe      	b.n	8001704 <BusFault_Handler+0x4>

08001706 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800170a:	e7fe      	b.n	800170a <UsageFault_Handler+0x4>

0800170c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001748:	4a16      	ldr	r2, [pc, #88]	; (80017a4 <SystemInit+0x60>)
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <SystemInit+0x60>)
 800174c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001758:	4a13      	ldr	r2, [pc, #76]	; (80017a8 <SystemInit+0x64>)
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <SystemInit+0x64>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <SystemInit+0x64>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800176a:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <SystemInit+0x64>)
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <SystemInit+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001778:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <SystemInit+0x64>)
 800177c:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <SystemInit+0x68>)
 800177e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001780:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <SystemInit+0x64>)
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <SystemInit+0x64>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <SystemInit+0x64>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001792:	f000 f80d 	bl	80017b0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001796:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <SystemInit+0x60>)
 8001798:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800179c:	609a      	str	r2, [r3, #8]
#endif
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00
 80017a8:	40023800 	.word	0x40023800
 80017ac:	24003010 	.word	0x24003010

080017b0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	2300      	movs	r3, #0
 80017bc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80017be:	4a36      	ldr	r2, [pc, #216]	; (8001898 <SetSysClock+0xe8>)
 80017c0:	4b35      	ldr	r3, [pc, #212]	; (8001898 <SetSysClock+0xe8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80017ca:	4b33      	ldr	r3, [pc, #204]	; (8001898 <SetSysClock+0xe8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3301      	adds	r3, #1
 80017d8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d103      	bne.n	80017e8 <SetSysClock+0x38>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80017e6:	d1f0      	bne.n	80017ca <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80017e8:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <SetSysClock+0xe8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d002      	beq.n	80017fa <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80017f4:	2301      	movs	r3, #1
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	e001      	b.n	80017fe <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80017fa:	2300      	movs	r3, #0
 80017fc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d142      	bne.n	800188a <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001804:	4a24      	ldr	r2, [pc, #144]	; (8001898 <SetSysClock+0xe8>)
 8001806:	4b24      	ldr	r3, [pc, #144]	; (8001898 <SetSysClock+0xe8>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8001810:	4a22      	ldr	r2, [pc, #136]	; (800189c <SetSysClock+0xec>)
 8001812:	4b22      	ldr	r3, [pc, #136]	; (800189c <SetSysClock+0xec>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800181a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800181c:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <SetSysClock+0xe8>)
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <SetSysClock+0xe8>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001824:	4a1c      	ldr	r2, [pc, #112]	; (8001898 <SetSysClock+0xe8>)
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <SetSysClock+0xe8>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800182e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001830:	4a19      	ldr	r2, [pc, #100]	; (8001898 <SetSysClock+0xe8>)
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <SetSysClock+0xe8>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800183a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <SetSysClock+0xe8>)
 800183e:	4a18      	ldr	r2, [pc, #96]	; (80018a0 <SetSysClock+0xf0>)
 8001840:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001842:	4a15      	ldr	r2, [pc, #84]	; (8001898 <SetSysClock+0xe8>)
 8001844:	4b14      	ldr	r3, [pc, #80]	; (8001898 <SetSysClock+0xe8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800184c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800184e:	bf00      	nop
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <SetSysClock+0xe8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f9      	beq.n	8001850 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <SetSysClock+0xf4>)
 800185e:	f240 6205 	movw	r2, #1541	; 0x605
 8001862:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001864:	4a0c      	ldr	r2, [pc, #48]	; (8001898 <SetSysClock+0xe8>)
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <SetSysClock+0xe8>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f023 0303 	bic.w	r3, r3, #3
 800186e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001870:	4a09      	ldr	r2, [pc, #36]	; (8001898 <SetSysClock+0xe8>)
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <SetSysClock+0xe8>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f043 0302 	orr.w	r3, r3, #2
 800187a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800187c:	bf00      	nop
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <SetSysClock+0xe8>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b08      	cmp	r3, #8
 8001888:	d1f9      	bne.n	800187e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	40007000 	.word	0x40007000
 80018a0:	07405408 	.word	0x07405408
 80018a4:	40023c00 	.word	0x40023c00

080018a8 <__libc_init_array>:
 80018a8:	b570      	push	{r4, r5, r6, lr}
 80018aa:	4e0d      	ldr	r6, [pc, #52]	; (80018e0 <__libc_init_array+0x38>)
 80018ac:	4c0d      	ldr	r4, [pc, #52]	; (80018e4 <__libc_init_array+0x3c>)
 80018ae:	1ba4      	subs	r4, r4, r6
 80018b0:	10a4      	asrs	r4, r4, #2
 80018b2:	2500      	movs	r5, #0
 80018b4:	42a5      	cmp	r5, r4
 80018b6:	d109      	bne.n	80018cc <__libc_init_array+0x24>
 80018b8:	4e0b      	ldr	r6, [pc, #44]	; (80018e8 <__libc_init_array+0x40>)
 80018ba:	4c0c      	ldr	r4, [pc, #48]	; (80018ec <__libc_init_array+0x44>)
 80018bc:	f000 f818 	bl	80018f0 <_init>
 80018c0:	1ba4      	subs	r4, r4, r6
 80018c2:	10a4      	asrs	r4, r4, #2
 80018c4:	2500      	movs	r5, #0
 80018c6:	42a5      	cmp	r5, r4
 80018c8:	d105      	bne.n	80018d6 <__libc_init_array+0x2e>
 80018ca:	bd70      	pop	{r4, r5, r6, pc}
 80018cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018d0:	4798      	blx	r3
 80018d2:	3501      	adds	r5, #1
 80018d4:	e7ee      	b.n	80018b4 <__libc_init_array+0xc>
 80018d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018da:	4798      	blx	r3
 80018dc:	3501      	adds	r5, #1
 80018de:	e7f2      	b.n	80018c6 <__libc_init_array+0x1e>
 80018e0:	08001920 	.word	0x08001920
 80018e4:	08001920 	.word	0x08001920
 80018e8:	08001920 	.word	0x08001920
 80018ec:	08001924 	.word	0x08001924

080018f0 <_init>:
 80018f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f2:	bf00      	nop
 80018f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018f6:	bc08      	pop	{r3}
 80018f8:	469e      	mov	lr, r3
 80018fa:	4770      	bx	lr

080018fc <_fini>:
 80018fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018fe:	bf00      	nop
 8001900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001902:	bc08      	pop	{r3}
 8001904:	469e      	mov	lr, r3
 8001906:	4770      	bx	lr
